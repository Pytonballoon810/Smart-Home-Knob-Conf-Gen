name: "Build and Release"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

# Define a concurrency group to cancel in-progress runs when a new workflow is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-24.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up macOS signing certificates
      - name: Install Apple certificates
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$APPLE_KEYCHAIN_PASSWORD" build.keychain
          rm certificate.p12

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # Add packages required for glib and other dependencies
          sudo apt-get install -y libglib2.0-dev libssl-dev libdbus-1-dev libsoup2.4-dev

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: './rusty-smart-knob-conf-gen/package-lock.json'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          rustup target add x86_64-unknown-linux-gnu

      - name: Install dependencies and build (frontend)
        run: |
          cd rusty-smart-knob-conf-gen
          npm install
          npm run build

      - name: Build the app (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        run: |
          cd rusty-smart-knob-conf-gen
          # Configure notarization credentials for 2FA
          echo "APPLE_ID=$APPLE_ID" >> $GITHUB_ENV
          echo "APPLE_PASSWORD=$APPLE_APP_SPECIFIC_PASSWORD" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV
          npm run tauri build

      - name: Build the app (Ubuntu)
        if: matrix.platform == 'ubuntu-24.04'
        run: |
          cd rusty-smart-knob-conf-gen
          npm run tauri build

      - name: Build the app (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          cd rusty-smart-knob-conf-gen
          npm run tauri build

      # Upload artifacts for all platforms
      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/msi/*.msi

      - name: Upload macOS artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/dmg/*.dmg
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/macos/*.app

      - name: Upload Linux artifacts
        if: matrix.platform == 'ubuntu-24.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          path: |
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/deb/*.deb
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/appimage/*.AppImage

      # If this is a release, upload the artifacts to the release
      - name: Upload release artifacts
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/msi/*.msi
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/dmg/*.dmg
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/deb/*.deb
            rusty-smart-knob-conf-gen/src-tauri/target/release/bundle/appimage/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
